All_Notes 
how to upload Image or file
------------------------
1. string wwrootpath = _env.WebRootPath;
            if (file!= null)
            {

                string filename=Guid.NewGuid().ToString()+Path.GetExtension(file.FileName);
                string productpath=Path.Combine(wwrootpath,@"Images/Product");
                if(!string.IsNullOrEmpty(p.product.imageurl))
                {
                    var oldImagePath=Path.Combine(wwrootpath,p.product.imageurl.TrimStart('/'));
                    if(System.IO.File.Exists(oldImagePath))
                    {
                        System.IO.File.Delete(oldImagePath);
                    }
                }
                using ( var filestream = new FileStream(Path.Combine(productpath,filename),FileMode.Create))
                {
                   file.CopyTo(filestream);
                }
                p.product.imageurl = @"/Images/Product/" + filename;
            }
            
            if (p.product.id == 0) 
            {
                _unitOfWork.product.Add(p.product);
                _unitOfWork.Save();
                TempData["success"] = "Record Added Successfully.!";
            }
            else
            {
                _unitOfWork.product.update(p.product);
                _unitOfWork.Save();
                TempData["success"] = "Record Updateed.!";
            }
           
            return RedirectToAction("Index");
-----------
         
2.  how to use foregion key with SelectedListItem
        
        public IActionResult Upsert(int? id)
        {
                    //IEnumerable<SelectListItem> CategoryItems=_unitOfWork.category.GetAll().Select(
                    //u=>new SelectListItem
                    //{
                    //    Text=u.Name,
                    //    Value=u.Id.ToString()
                    //}
                    //);
                    //ViewBag.CategoryItems=CategoryItems;
                    //ViewData["CategoryItems"]=CategoryItems;
            

            VMProduct vmp = new()
            {
                CategoryList = _unitOfWork.category.GetAll().Select(u=>new SelectListItem
                {
                    Text=u.Name,
                    Value=u.Id.ToString()
                }),
                product = new Product()
            };
            if (id == null || id==0)
            {
                return View(vmp);
            }
            else
            {
                vmp.product=_unitOfWork.product.GetFirstOrDefault(u=>u.id==id);
                return View(vmp);
            }
            return View(vmp);
        }
  3. How To make Generic Repository.
      --Repository--
  
  public class Repository<T> : IRepository<T> where T : class
    {
        private readonly DataContext _db;
        internal DbSet<T> dbset;
        public Repository(DataContext db)
        {
            _db = db;
            this.dbset=_db.Set<T>();
        }

        public void Add(T entity)
        {
            dbset.Add(entity);
        }

        public IEnumerable<T> GetAll()
        {
            IQueryable<T> Query = dbset;
            return Query.ToList();
        }
        public T Find(int Id)
        {
            var res= dbset.Find(Id);
            return res;
        }
        public T GetFirstOrDefault(Expression<Func<T, bool>> filter)
        {
            IQueryable<T> Query = dbset;
            Query=Query.Where(filter);
            return Query.FirstOrDefault();
        }

        public void Remove(T entity)
        {
           dbset.Remove(entity);
        }

        public void RemoveRange(IEnumerable<T> entity)
        {
            dbset.RemoveRange(entity);
        }  
    }
    
     --IRepository--
     
      public interface IRepository<T> where T : class
    {
        //Category

        IEnumerable<T> GetAll();
        T GetFirstOrDefault(Expression<Func<T, bool>> filter);
        T Find(int id);
        void Add(T entity);
        
        void Remove(T entity);
        void RemoveRange(IEnumerable<T> entity);
    }
     --ICategoryRepository--
     
     public interface ICategoryRepository:IRepository<Category>
    {
        void update(Category category);
       
    }
     --CategoryRepository--
     
    public class CategoryRepository : Repository<Category>, ICategoryRepository
    {
        private readonly DataContext _db;
        public CategoryRepository(DataContext db):base(db)
        {
            _db= db;
        }
        public void update(Category category)
        {
            _db.Update(category);
        }
    }
    --UnitOfWork--
    public class UnitOfWork:IUnitOfWork
    {
        private readonly DataContext _db;
        public UnitOfWork(DataContext db)
        {
            _db = db;
            category = new CategoryRepository(_db);
            coverType= new CoverTypeRepository(_db);
            product= new ProductRepository(_db);
        }
        public ICategoryRepository category { get; private set; }
        public ICoverTypeRepository coverType { get; private set; }
        public IProductReository product { get; private set; }

        public void Save()
        {
           _db.SaveChanges();
        }
    }
    ------IUnitOfWork---
     public interface IUnitOfWork
    {

        ICategoryRepository category { get; }
        ICoverTypeRepository coverType { get; }
        IProductReository product { get; }

        void Save();
    }
    --------Program.cs---
    
    builder.Services.AddScoped<IUnitOfWork,UnitOfWork>();

//builder.Services.AddScoped<ICategoryRepository,CategoryRepository>();
builder.Services.AddMvc();
builder.Services.AddSession(options => {
    options.IdleTimeout = TimeSpan.FromMinutes(30);
});
-------
-------
how to show data with foregion Key --
ex first table product and second table category we are fetching data foregion key CategoryId -
they are provideing predefind property
--
public ProductController()
{
            
       
public ProductController(IUnitOfWork unitOfWork, IWebHostEnvironment env)
        {
            _unitOfWork= unitOfWork;
            _env= env;
            _db.Products.Include(u=>u.category);
        }
 }

--AutoComplete---
[HttpPost]
        public JsonResult Index(string Prefix, string GetType)
        {
            string[,] param = new string[,] {
                {"@GetType",GetType },
                {"@Prefix",Prefix }
            };
            DataTable dt = Common.ExecuteData("AutocompleteProduct", param);
            List<string> auto=new List<string>(dt.Rows.Count);
            foreach (DataRow item in dt.Rows)
            {
                auto.Add(item[0].ToString());
            }
            return Json(auto);
        }
--
 public static string constr = "Data Source=DESKTOP-T4MQ4KH;Initial Catalog=checkauto;Integrated Security=True";
        public static DataTable ExecuteData(string proc, string[,] param)
        {
            DataTable dt = new DataTable();
            SqlConnection con = new SqlConnection(constr);
            SqlCommand cmd = new SqlCommand(proc, con);
            cmd.CommandType = CommandType.StoredProcedure;
            for (int i = 0; i < param.Length/2; i++)
            {
                cmd.Parameters.AddWithValue(param[i, 0], param[i,1]);
            }
            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
            adapter.Fill(dt);
            return dt;
        }
--
@{
    ViewData["Title"] = "Home Page";
    Layout = null;
}
@*<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <link href="https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel="stylesheet">
    <script src="https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>*@
@*    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.js"></script>*@
<link rel="stylesheet" href="//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.js"></script>
@*
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
*@
<div class="text-center">
    <div class="form-group">
        <div class="row">
            <label>Enter Name</label>
            <input type="text" id="name" onfocus="AutoComplete('name','country')"/>
        </div>
    </div>
  </div>
  <script>
   function AutoComplete(Id, GetType) {
    $('#' + Id).autocomplete({
        source: function (request, response) {
            $.ajax({
                url: "/Home/Index",
                type: "POST",
                dataType: "json",
                data: { Prefix: request.term, GetType: GetType },
                success: function (data) {
                    response($.map(data, function (item) {
                        //alert(item)
                        return { label: item, value: item };
                    }))
                }
            })
        },
        messages: {
            noResults: "", results: ""
        }
    });
}
</script>
---------------------------
download pdf  ----------------
[HttpGet("AllUserReviewpdf")]
		public async Task<IActionResult> AllUserReviewpdf()
		{
			var document = new PdfDocument();
			var userReview = await GetUserReview();
			//string imgeurl = "data:image/png;base64, " + Getbase64string() + "";
			string[] copies = { "Employee Review"};
			for (int i = 0; i < copies.Length; i++)
			{
				string htmlcontent = "<div style='width:100%; text-align:center'>";
				//htmlcontent += "<img style='width:100;height:200px' src='" + imgeurl + "'   />";
				htmlcontent += "<h2>" + copies[i] + "</h2>";
				htmlcontent += "<h2>Welcome to EPL_group</h2>";
				htmlcontent += "<table style='width:100%; border: 1px solid #000'>";
				htmlcontent += "<thead style='font-weight:bold'>";
				htmlcontent += "<tr>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>Employee</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>QualityOfWork</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>QWcomments</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>CustomerSatisfaction</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>CScomments</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>TimeAndAttendance</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>TaAcomments</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>AdaptabilityFlexibility</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>ABFcomments</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>Initiative</td>";
				htmlcontent += "<td style='border:1px solid #000; width: 8%'>ITcomments</td>";
				htmlcontent += "</tr>";
				htmlcontent += "</thead>";
				htmlcontent += "<tbody>";
				
					userReview.ForEach(item =>
					{
						htmlcontent += "<tr>";
						htmlcontent += "<td>" + item.Username + "</td>";
						htmlcontent += "<td>" + item.QualityOfWork + "</td>";
						htmlcontent += "<td>" + item.QWcomments + "</td >";
						htmlcontent += "<td>" + item.CustomerSatisfaction + "</td>";
						htmlcontent += "<td> " + item.CScomments + "</td >";
						htmlcontent += "<td>" + item.TimeAndAttendance + "</td>";
						htmlcontent += "<td>" + item.TaAcomments + "</td>";
						htmlcontent += "<td>" + item.AdaptabilityFlexibility + "</td >";
						htmlcontent += "<td>" + item.ABFcomments + "</td>";
						htmlcontent += "<td> " + item.Initiative + "</td >";
						htmlcontent += "<td>" + item.ITcomments + "</td>";
						htmlcontent += "</tr>";
					});
				
				htmlcontent += "</tbody>";
				htmlcontent += "</table>";
				htmlcontent += "</div>";
				PdfGenerator.AddPdfPages(document,
							 htmlcontent,
							 PageSize.A2);
			}
			byte[]? response = null;
			using (MemoryStream ms = new MemoryStream())
			{
				document.Save(ms);
				response = ms.ToArray();
			}
			string Filename = "EmployeeReview.pdf";
			return File(response, "application/pdf", Filename);
		}
==========================

